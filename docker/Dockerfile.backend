# 后端Java应用Dockerfile - 多阶段构建
# 第一阶段：构建阶段（在宿主机完成）
FROM openjdk:8-jdk-alpine3.18 AS builder

# 设置工作目录
WORKDIR /app

# 强制更新为国内镜像源，防止下载过慢
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories

# 安装必要的工具
RUN apk add --no-cache curl

# 复制Maven构建的jar包（从宿主机构建完成）
COPY ruoyi-admin/target/ruoyi-admin.jar app.jar

# 配置文件现在通过docker-compose挂载，不需要复制
# COPY application.yml /app/application.yml
# COPY application-druid.yml /app/application-druid.yml
# COPY application-docker.yml /app/application-docker.yml

# 第二阶段：运行阶段
FROM openjdk:8-jre-alpine3.18

# 设置工作目录
WORKDIR /app

# 强制更新为国内镜像源，防止下载过慢
RUN sed -i 's/dl-cdn.alpinelinux.org/mirrors.tuna.tsinghua.edu.cn/g' /etc/apk/repositories

# 安装必要的工具
RUN apk add --no-cache curl

# 从构建阶段复制jar包
COPY --from=builder /app/app.jar app.jar

# 创建上传文件目录
RUN mkdir -p /home/ruoyi/uploadPath

# 暴露端口
EXPOSE 28080

# 设置JVM参数和Spring profiles
ENV JAVA_OPTS="-Xms512m -Xmx1024m -Djava.security.egd=file:/dev/./urandom"
ENV SPRING_PROFILES_ACTIVE=""

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:28080/ || exit 1

# 启动应用
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
